name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual triggering

jobs:
  cache:
    name: Cache
    runs-on: ubuntu-22.04
    steps:
      - name: Cache permissions
        run: |
          sudo chown $(id -un) /var/cache/apt/archives
      - name: Cache packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives/*.deb
          key: apt-cache-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            apt-cache-
      - name: Download packages
        run: |
          sudo apt update
          sudo apt install -y -d -o Acquire::Retries=50 \
            mtools syslinux isolinux \
            libc6-dev-i386 valgrind \
            gcc-arm-none-eabi gcc-aarch64-linux-gnu \
            gcc-riscv64-linux-gnu

  build-all-archs:
    name: Build All Architectures
    runs-on: ubuntu-22.04
    needs: cache
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, i386, x86_64, arm, arm32, arm64, riscv, riscv32, riscv64, loong64]
        include:
          - arch: x86
            cross: ''
            packages: 'mtools syslinux isolinux libc6-dev-i386 libgcc-s1:i386 libc6-dbg:i386'
          - arch: i386
            cross: ''
            packages: 'mtools syslinux isolinux libc6-dev-i386 libgcc-s1:i386 libc6-dbg:i386'
          - arch: x86_64
            cross: ''
            packages: 'mtools syslinux isolinux'
          - arch: arm
            cross: 'arm-none-eabi-'
            packages: 'mtools syslinux isolinux gcc-arm-none-eabi'
          - arch: arm32
            cross: 'arm-none-eabi-'
            packages: 'mtools syslinux isolinux gcc-arm-none-eabi'
          - arch: arm64
            cross: 'aarch64-linux-gnu-'
            packages: 'mtools syslinux isolinux gcc-aarch64-linux-gnu'
          - arch: riscv
            cross: 'riscv64-linux-gnu-'
            packages: 'mtools syslinux isolinux gcc-riscv64-linux-gnu'
          - arch: riscv32
            cross: 'riscv64-linux-gnu-'
            packages: 'mtools syslinux isolinux gcc-riscv64-linux-gnu'
          - arch: riscv64
            cross: 'riscv64-linux-gnu-'
            packages: 'mtools syslinux isolinux gcc-riscv64-linux-gnu'
          - arch: loong64
            cross: ''
            packages: 'mtools syslinux isolinux'
            
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache permissions
        run: |
          sudo chown $(id -un) /var/cache/apt/archives
      
      - name: Cache packages
        uses: actions/cache/restore@v4
        with:
          path: /var/cache/apt/archives/*.deb
          key: apt-cache-${{ github.run_id }}-${{ github.run_attempt }}
      
      - name: Install packages
        run: |
          if [[ "${{ matrix.arch }}" == "i386" || "${{ matrix.arch }}" == "x86" ]]; then
            sudo dpkg --add-architecture i386
          fi
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 ${{ matrix.packages }}
          
      - name: Install LoongArch64 toolchain (if needed)
        if: matrix.arch == 'loong64'
        run: |
          mkdir -p /tmp/loongarch-toolchain
          cd /tmp/loongarch-toolchain
          wget -q https://github.com/loongson/build-tools/releases/download/2022.09.06/loongarch64-clfs-5.0-cross-tools-gcc-full.tar.xz || true
          if [ -f loongarch64-clfs-5.0-cross-tools-gcc-full.tar.xz ]; then
            sudo tar -xf loongarch64-clfs-5.0-cross-tools-gcc-full.tar.xz -C /opt/ || true
            sudo ln -sf /opt/cross-tools/bin/loongarch64-unknown-linux-gnu-* /usr/bin/ || true
            export CROSS="loongarch64-unknown-linux-gnu-"
          else
            echo "LoongArch toolchain not available, build may fail"
          fi
      
      - name: Build for architecture
        id: build
        continue-on-error: true
        run: |
          # Set output directory name based on architecture
          if [[ "${{ matrix.arch }}" != "x86" ]]; then
            mkdir -p "bin-${{ matrix.arch }}-efi"
            OUTPUT_DIR="bin-${{ matrix.arch }}-efi"
          else
            mkdir -p "bin"
            OUTPUT_DIR="bin"
          fi
          
          cd src
          
          # Set cross-compiler if defined
          CROSS_FLAG=""
          if [[ -n "${{ matrix.cross }}" ]]; then
            CROSS_FLAG="CROSS=${{ matrix.cross }}"
          fi
          
          # Set architecture flag if not x86
          ARCH_FLAG=""
          if [[ "${{ matrix.arch }}" != "x86" ]]; then
            ARCH_FLAG="ARCH=${{ matrix.arch }}"
          fi
          
          # Run the build
          echo "Building with: make ${CROSS_FLAG} ${ARCH_FLAG}"
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
            make ${CROSS_FLAG} ${ARCH_FLAG} || true
          else
            make ${CROSS_FLAG} ${ARCH_FLAG} bin-${{ matrix.arch }}-efi/ipxe.efi bin-${{ matrix.arch }}-efi/ipxe.usb bin-${{ matrix.arch }}-efi/ipxe.iso || true
          fi
          
          echo "build_success=true" >> $GITHUB_OUTPUT
      
      - name: Package artifacts
        if: steps.build.outputs.build_success == 'true'
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
            mkdir -p output/x86
            cp -r src/bin/* output/x86/ || true
          else
            mkdir -p output/${{ matrix.arch }}
            cp -r src/bin-${{ matrix.arch }}-* output/${{ matrix.arch }}/ || true
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-builds
          path: output/${{ matrix.arch }}/
          retention-days: 7
          
      - name: Run tests (x86 architecture only)
        if: matrix.arch == 'x86' || matrix.arch == 'i386' || matrix.arch == 'x86_64'
        run: |
          cd src
          if [ -f bin-i386-linux/tests.linux ]; then
            valgrind ./bin-i386-linux/tests.linux || true
          fi
          if [ -f bin-x86_64-linux/tests.linux ]; then
            valgrind ./bin-x86_64-linux/tests.linux || true
          fi

  release:
    name: Create Release
    needs: [build-all-archs]
    runs-on: ubuntu-latest
    # Only run on tag pushes
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: Prepare release files
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          mkdir -p release
          
          # Create versioned zip archives for each architecture
          cd all-artifacts
          for arch_dir in */; do
            arch=$(basename "$arch_dir")
            arch=${arch%-builds}
            if [ -d "${arch}-builds" ]; then
              echo "Creating zip for ${arch}"
              zip -r "../release/${arch}-${VERSION}.zip" "${arch}-builds" || true
            fi
          done
          cd ..
          
          # Create a combined zip with all architectures
          zip -r "release/all-builds-$VERSION.zip" all-artifacts || true
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}